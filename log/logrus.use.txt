log.Fatalf("Failed to send event %s to topic %s with key %d")


log.WithFields(log.Fields{
  "event": event,
  "topic": topic,
  "key": key,
}).Fatal("Failed to send event")


func main() {
    requestID := 1
    userIP := "192.168.10.1"
    requestLogger := log.WithFields(log.Fields{"request_id": requestID, "user_ip": userIP})
    requestLogger.Info("something happened on that request")
    requestLogger.Warn("something not great happened")
}

log.Trace("Something very low level.")
log.Debug("Useful debugging information.")
log.Info("Something noteworthy happened!")
log.Warn("You should probably take a look at this.")
log.Error("Something failed but I'm not quitting.")
log.Fatal("Bye.") // Calls os.Exit(1) after logging
log.Panic("I'm bailing.") // Calls panic() after logging

log.SetLevel(log.InfoLevel)


handler := func() {
  // gracefully shutdown something...
}
logrus.RegisterExitHandler(handler)


log.SetFormatter(&log.JSONFormatter{})
log.WithFields(log.Fields{
    "animal": "walrus",
}).Info("A walrus appears")

  if Environment == "production" {
    log.SetFormatter(&log.JSONFormatter{})
  } else {
    // The TextFormatter is default, you don't actually have to do this.
    log.SetFormatter(&log.TextFormatter{})
  }


  func init() {
    // JSONフォーマット
    log.SetFormatter(&log.JSONFormatter{})

    // 標準エラー出力でなく標準出力とする
    log.SetOutput(os.Stdout)

    // Warningレベル以上を出力
    log.SetLevel(log.WarnLevel)
  }


  logrusは簡単に導入できる反面、zapなどの他の外部パッケージに比べてると速度が遅いという短所もあります。
  私が導入したプロジェクトではとりあえずJSONで出力できるようにしたかっただけで、それほどリクエスト数も多くなく、
  ログの出力数も多くはなかったのでlogrusを導入しました。ケースを見定めてパッケージを選定する必要がありそうです。